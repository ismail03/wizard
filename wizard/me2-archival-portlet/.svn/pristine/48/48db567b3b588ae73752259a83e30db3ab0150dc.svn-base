/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ihg.me2.archive.service.service.http;

import com.ihg.me2.archive.service.model.ArchiveContent;

import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.util.StringPool;

import java.util.Date;
import java.util.List;

/**
 * @author    Sandip Patel
 * @generated
 */
public class ArchiveContentJSONSerializer {
	public static JSONObject toJSONObject(ArchiveContent model) {
		JSONObject jsonObject = JSONFactoryUtil.createJSONObject();

		jsonObject.put("content_id", model.getContent_id());
		jsonObject.put("content_type", model.getContent_type());
		jsonObject.put("content_name", model.getContent_name());
		jsonObject.put("groupId", model.getGroupId());

		Date modified_date = model.getModified_date();

		String modified_dateJSON = StringPool.BLANK;

		if (modified_date != null) {
			modified_dateJSON = String.valueOf(modified_date.getTime());
		}

		jsonObject.put("modified_date", modified_dateJSON);
		jsonObject.put("author_name", model.getAuthor_name());
		jsonObject.put("author_email", model.getAuthor_email());

		Date notified_date = model.getNotified_date();

		String notified_dateJSON = StringPool.BLANK;

		if (notified_date != null) {
			notified_dateJSON = String.valueOf(notified_date.getTime());
		}

		jsonObject.put("notified_date", notified_dateJSON);
		jsonObject.put("status", model.getStatus());

		Date expired_date = model.getExpired_date();

		String expired_dateJSON = StringPool.BLANK;

		if (expired_date != null) {
			expired_dateJSON = String.valueOf(expired_date.getTime());
		}

		jsonObject.put("expired_date", expired_dateJSON);

		Date deleted_date = model.getDeleted_date();

		String deleted_dateJSON = StringPool.BLANK;

		if (deleted_date != null) {
			deleted_dateJSON = String.valueOf(deleted_date.getTime());
		}

		jsonObject.put("deleted_date", deleted_dateJSON);
		jsonObject.put("content_url", model.getContent_url());

		Date create_datetime = model.getCreate_datetime();

		String create_datetimeJSON = StringPool.BLANK;

		if (create_datetime != null) {
			create_datetimeJSON = String.valueOf(create_datetime.getTime());
		}

		jsonObject.put("create_datetime", create_datetimeJSON);
		jsonObject.put("created_by", model.getCreated_by());

		Date update_datetime = model.getUpdate_datetime();

		String update_datetimeJSON = StringPool.BLANK;

		if (update_datetime != null) {
			update_datetimeJSON = String.valueOf(update_datetime.getTime());
		}

		jsonObject.put("update_datetime", update_datetimeJSON);
		jsonObject.put("updated_by", model.getUpdated_by());

		return jsonObject;
	}

	public static JSONArray toJSONArray(
		com.ihg.me2.archive.service.model.ArchiveContent[] models) {
		JSONArray jsonArray = JSONFactoryUtil.createJSONArray();

		for (ArchiveContent model : models) {
			jsonArray.put(toJSONObject(model));
		}

		return jsonArray;
	}

	public static JSONArray toJSONArray(
		com.ihg.me2.archive.service.model.ArchiveContent[][] models) {
		JSONArray jsonArray = JSONFactoryUtil.createJSONArray();

		for (ArchiveContent[] model : models) {
			jsonArray.put(toJSONArray(model));
		}

		return jsonArray;
	}

	public static JSONArray toJSONArray(
		List<com.ihg.me2.archive.service.model.ArchiveContent> models) {
		JSONArray jsonArray = JSONFactoryUtil.createJSONArray();

		for (ArchiveContent model : models) {
			jsonArray.put(toJSONObject(model));
		}

		return jsonArray;
	}
}