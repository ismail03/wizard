package com.ihg.me2.archive.expirescheduler;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.ihg.me2.archive.expireutil.ExpireSchedulerUtil;
import com.ihg.me2.archive.service.model.ArchiveContent;
import com.ihg.me2.archive.service.service.ArchiveContentLocalServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portlet.journal.model.JournalArticle;
import com.liferay.portlet.journal.service.JournalArticleLocalServiceUtil;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ JournalArticleLocalServiceUtil.class,
		ArchiveContentLocalServiceUtil.class })
public class ExpireSchedulerWebContentTest {

	public ArchiveContent getExpiredWebContentArchive(int i) {
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		Date currentDate = null;
		try {
			currentDate = sdf.parse(sdf.format(date));
		} catch (ParseException e) {
			e.printStackTrace();
		}

		Date modifiedDate = new DateTime().minusDays(50).toDate();
		Date notifidDate = new DateTime().minusDays(20).toDate();

		ArchiveContent mockArchive = mock(ArchiveContent.class);
		when(mockArchive.getContent_id()).thenReturn(String.valueOf(i));
		when(mockArchive.getContent_type()).thenReturn("News");
		when(mockArchive.getAuthor_email()).thenReturn("test@gmail.com");
		when(mockArchive.getAuthor_name()).thenReturn("testing");
		when(mockArchive.getExpired_date()).thenReturn(currentDate);
		when(mockArchive.getModified_date()).thenReturn(modifiedDate);
		when(mockArchive.getNotified_date()).thenReturn(notifidDate);
		when(mockArchive.getStatus()).thenReturn("Notified");
		return mockArchive;
	}

	// Expire WebContent SuccessTest
	// Changes the status to Expired in Archive Content
	@Test
	public void expireWebContentSuccessTest() throws SystemException,
			ParseException, PortalException {
		List<ArchiveContent> expiredWebContentArchives = new ArrayList<ArchiveContent>();

		ArchiveContent expiredArchive = getExpiredWebContentArchive(1001);
		expiredWebContentArchives.add(expiredArchive);

		// mock journal article
		Date modifiedDate = new DateTime().minusDays(50).toDate();

		JournalArticle mockJournalArticle = mock(JournalArticle.class);
		when(mockJournalArticle.getPrimaryKey()).thenReturn(Long.valueOf(1001));
		when(mockJournalArticle.getGroupId()).thenReturn(Long.valueOf(1080));
		when(mockJournalArticle.getModifiedDate()).thenReturn(modifiedDate);

		PowerMockito.mockStatic(JournalArticleLocalServiceUtil.class);
		when(JournalArticleLocalServiceUtil.getJournalArticle(1001))
				.thenReturn(mockJournalArticle);

		// mock Archive Content
		ArchiveContent mockExpiredArchive = getExpiredWebContentArchive(1001);
		when(mockExpiredArchive.getStatus()).thenReturn("Expired");

		PowerMockito.mockStatic(ArchiveContentLocalServiceUtil.class);
		when(
				ArchiveContentLocalServiceUtil
						.updateArchiveContent(mockExpiredArchive)).thenReturn(
				mockExpiredArchive);

		ExpireSchedulerUtil.separateContents(expiredWebContentArchives);
	}

	// Delete updated web content SuccessTest
	// Changes the status to Expired in Archive Content
	@Test
	public void deleteUpdatedWebContentSuccessTest() throws SystemException,
			ParseException, PortalException {
		List<ArchiveContent> expiredWebContentArchives = new ArrayList<ArchiveContent>();

		ArchiveContent mockArchive = mock(ArchiveContent.class);
		mockArchive = getExpiredWebContentArchive(1001);
		when(mockArchive.getModified_date()).thenReturn(
				new DateTime().minusDays(10).toDate());
		expiredWebContentArchives.add(mockArchive);

		// mock journal article
		Date modifiedDate = new DateTime().minusDays(10).toDate();

		JournalArticle mockJournalArticle = mock(JournalArticle.class);
		when(mockJournalArticle.getPrimaryKey()).thenReturn(Long.valueOf(1001));
		when(mockJournalArticle.getGroupId()).thenReturn(Long.valueOf(1080));
		when(mockJournalArticle.getModifiedDate()).thenReturn(modifiedDate);

		PowerMockito.mockStatic(JournalArticleLocalServiceUtil.class);
		when(JournalArticleLocalServiceUtil.getJournalArticle(1001))
				.thenReturn(mockJournalArticle);

		// mock Archive Content
		ArchiveContent mockExpiredArchive = getExpiredWebContentArchive(1001);

		PowerMockito.mockStatic(ArchiveContentLocalServiceUtil.class);
		when(
				ArchiveContentLocalServiceUtil
						.deleteArchiveContent(mockExpiredArchive)).thenReturn(
				null);

		ExpireSchedulerUtil.separateContents(expiredWebContentArchives);
	}

	// WebContent Failure Test
	// Remove webcontent from the Journal Article
	@Test
	public void testForNullExpiredWebContents() throws SystemException,
			ParseException, PortalException {
		List<ArchiveContent> expiredWebContentArchives = new ArrayList<ArchiveContent>();

		ArchiveContent expiredArchive = getExpiredWebContentArchive(1001);
		expiredWebContentArchives.add(expiredArchive);

		// mock journal article
		PowerMockito.mockStatic(JournalArticleLocalServiceUtil.class);
		when(JournalArticleLocalServiceUtil.getJournalArticle(1001))
				.thenReturn(null);

		// mock Archive Content
		ArchiveContent mockExpiredArchive = getExpiredWebContentArchive(1001);
		when(mockExpiredArchive.getStatus()).thenReturn("DeletedFromPortal");

		PowerMockito.mockStatic(ArchiveContentLocalServiceUtil.class);
		when(
				ArchiveContentLocalServiceUtil
						.updateArchiveContent(mockExpiredArchive)).thenReturn(
				mockExpiredArchive);

		ExpireSchedulerUtil.separateContents(expiredWebContentArchives);
	}
}
