/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ihg.me2.archive.service.model.impl;

import com.ihg.me2.archive.service.model.ArchiveContent;
import com.ihg.me2.archive.service.model.ArchiveContentModel;
import com.ihg.me2.archive.service.model.ArchiveContentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the ArchiveContent service. Represents a row in the &quot;archive_content&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.me2.archive.service.model.ArchiveContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArchiveContentImpl}.
 * </p>
 *
 * @author Sandip Patel
 * @see ArchiveContentImpl
 * @see com.ihg.me2.archive.service.model.ArchiveContent
 * @see com.ihg.me2.archive.service.model.ArchiveContentModel
 * @generated
 */
public class ArchiveContentModelImpl extends BaseModelImpl<ArchiveContent>
	implements ArchiveContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a archive content model instance should use the {@link com.ihg.me2.archive.service.model.ArchiveContent} interface instead.
	 */
	public static final String TABLE_NAME = "archive_content";
	public static final Object[][] TABLE_COLUMNS = {
			{ "content_id", new Integer(Types.VARCHAR) },
			{ "content_type", new Integer(Types.VARCHAR) },
			{ "content_name", new Integer(Types.VARCHAR) },
			{ "groupId", new Integer(Types.BIGINT) },
			{ "modified_date", new Integer(Types.TIMESTAMP) },
			{ "author_name", new Integer(Types.VARCHAR) },
			{ "author_email", new Integer(Types.VARCHAR) },
			{ "notified_date", new Integer(Types.TIMESTAMP) },
			{ "status", new Integer(Types.VARCHAR) },
			{ "expired_date", new Integer(Types.TIMESTAMP) },
			{ "deleted_date", new Integer(Types.TIMESTAMP) },
			{ "content_url", new Integer(Types.VARCHAR) },
			{ "create_datetime", new Integer(Types.TIMESTAMP) },
			{ "created_by", new Integer(Types.VARCHAR) },
			{ "update_datetime", new Integer(Types.TIMESTAMP) },
			{ "updated_by", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table archive_content (content_id VARCHAR(100) not null primary key,content_type VARCHAR(20) null,content_name VARCHAR(150) null,groupId LONG,modified_date DATE null,author_name VARCHAR(100) null,author_email VARCHAR(100) null,notified_date DATE null,status VARCHAR(10) null,expired_date DATE null,deleted_date DATE null,content_url VARCHAR(500) null,create_datetime DATE null,created_by VARCHAR(75) null,update_datetime DATE null,updated_by VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table archive_content";
	public static final String ORDER_BY_JPQL = " ORDER BY archiveContent.content_name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY archive_content.content_name ASC";
	public static final String DATA_SOURCE = "archiveDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "archiveTxManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.me2.archive.service.model.ArchiveContent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.me2.archive.service.model.ArchiveContent"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ArchiveContent toModel(ArchiveContentSoap soapModel) {
		ArchiveContent model = new ArchiveContentImpl();

		model.setContent_id(soapModel.getContent_id());
		model.setContent_type(soapModel.getContent_type());
		model.setContent_name(soapModel.getContent_name());
		model.setGroupId(soapModel.getGroupId());
		model.setModified_date(soapModel.getModified_date());
		model.setAuthor_name(soapModel.getAuthor_name());
		model.setAuthor_email(soapModel.getAuthor_email());
		model.setNotified_date(soapModel.getNotified_date());
		model.setStatus(soapModel.getStatus());
		model.setExpired_date(soapModel.getExpired_date());
		model.setDeleted_date(soapModel.getDeleted_date());
		model.setContent_url(soapModel.getContent_url());
		model.setCreate_datetime(soapModel.getCreate_datetime());
		model.setCreated_by(soapModel.getCreated_by());
		model.setUpdate_datetime(soapModel.getUpdate_datetime());
		model.setUpdated_by(soapModel.getUpdated_by());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ArchiveContent> toModels(ArchiveContentSoap[] soapModels) {
		List<ArchiveContent> models = new ArrayList<ArchiveContent>(soapModels.length);

		for (ArchiveContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.me2.archive.service.model.ArchiveContent"));

	public ArchiveContentModelImpl() {
	}

	public String getPrimaryKey() {
		return _content_id;
	}

	public void setPrimaryKey(String pk) {
		setContent_id(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return _content_id;
	}

	public String getContent_id() {
		if (_content_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _content_id;
		}
	}

	public void setContent_id(String content_id) {
		_content_id = content_id;
	}

	public String getContent_type() {
		if (_content_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _content_type;
		}
	}

	public void setContent_type(String content_type) {
		_content_type = content_type;
	}

	public String getContent_name() {
		if (_content_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _content_name;
		}
	}

	public void setContent_name(String content_name) {
		_content_name = content_name;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public Date getModified_date() {
		return _modified_date;
	}

	public void setModified_date(Date modified_date) {
		_modified_date = modified_date;
	}

	public String getAuthor_name() {
		return _author_name;
	}

	public void setAuthor_name(String author_name) {
		_author_name = author_name;
	}

	public String getAuthor_email() {
		if (_author_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _author_email;
		}
	}

	public void setAuthor_email(String author_email) {
		_author_email = author_email;
	}

	public Date getNotified_date() {
		return _notified_date;
	}

	public void setNotified_date(Date notified_date) {
		_notified_date = notified_date;
	}

	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	public void setStatus(String status) {
		_status = status;
	}

	public Date getExpired_date() {
		return _expired_date;
	}

	public void setExpired_date(Date expired_date) {
		_expired_date = expired_date;
	}

	public Date getDeleted_date() {
		return _deleted_date;
	}

	public void setDeleted_date(Date deleted_date) {
		_deleted_date = deleted_date;
	}

	public String getContent_url() {
		if (_content_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _content_url;
		}
	}

	public void setContent_url(String content_url) {
		_content_url = content_url;
	}

	public Date getCreate_datetime() {
		return _create_datetime;
	}

	public void setCreate_datetime(Date create_datetime) {
		_create_datetime = create_datetime;
	}

	public String getCreated_by() {
		if (_created_by == null) {
			return StringPool.BLANK;
		}
		else {
			return _created_by;
		}
	}

	public void setCreated_by(String created_by) {
		_created_by = created_by;
	}

	public Date getUpdate_datetime() {
		return _update_datetime;
	}

	public void setUpdate_datetime(Date update_datetime) {
		_update_datetime = update_datetime;
	}

	public String getUpdated_by() {
		if (_updated_by == null) {
			return StringPool.BLANK;
		}
		else {
			return _updated_by;
		}
	}

	public void setUpdated_by(String updated_by) {
		_updated_by = updated_by;
	}

	public ArchiveContent toEscapedModel() {
		if (isEscapedModel()) {
			return (ArchiveContent)this;
		}
		else {
			return (ArchiveContent)Proxy.newProxyInstance(ArchiveContent.class.getClassLoader(),
				new Class[] { ArchiveContent.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public Object clone() {
		ArchiveContentImpl clone = new ArchiveContentImpl();

		clone.setContent_id(getContent_id());
		clone.setContent_type(getContent_type());
		clone.setContent_name(getContent_name());
		clone.setGroupId(getGroupId());
		clone.setModified_date(getModified_date());
		clone.setAuthor_name(getAuthor_name());
		clone.setAuthor_email(getAuthor_email());
		clone.setNotified_date(getNotified_date());
		clone.setStatus(getStatus());
		clone.setExpired_date(getExpired_date());
		clone.setDeleted_date(getDeleted_date());
		clone.setContent_url(getContent_url());
		clone.setCreate_datetime(getCreate_datetime());
		clone.setCreated_by(getCreated_by());
		clone.setUpdate_datetime(getUpdate_datetime());
		clone.setUpdated_by(getUpdated_by());

		return clone;
	}

	public int compareTo(ArchiveContent archiveContent) {
		int value = 0;

		value = getContent_name().compareTo(archiveContent.getContent_name());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ArchiveContent archiveContent = null;

		try {
			archiveContent = (ArchiveContent)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String pk = archiveContent.getPrimaryKey();

		if (getPrimaryKey().equals(pk)) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{content_id=");
		sb.append(getContent_id());
		sb.append(", content_type=");
		sb.append(getContent_type());
		sb.append(", content_name=");
		sb.append(getContent_name());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", modified_date=");
		sb.append(getModified_date());
		sb.append(", author_name=");
		sb.append(getAuthor_name());
		sb.append(", author_email=");
		sb.append(getAuthor_email());
		sb.append(", notified_date=");
		sb.append(getNotified_date());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", expired_date=");
		sb.append(getExpired_date());
		sb.append(", deleted_date=");
		sb.append(getDeleted_date());
		sb.append(", content_url=");
		sb.append(getContent_url());
		sb.append(", create_datetime=");
		sb.append(getCreate_datetime());
		sb.append(", created_by=");
		sb.append(getCreated_by());
		sb.append(", update_datetime=");
		sb.append(getUpdate_datetime());
		sb.append(", updated_by=");
		sb.append(getUpdated_by());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.ihg.me2.archive.service.model.ArchiveContent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>content_id</column-name><column-value><![CDATA[");
		sb.append(getContent_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_type</column-name><column-value><![CDATA[");
		sb.append(getContent_type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_name</column-name><column-value><![CDATA[");
		sb.append(getContent_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modified_date</column-name><column-value><![CDATA[");
		sb.append(getModified_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author_name</column-name><column-value><![CDATA[");
		sb.append(getAuthor_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author_email</column-name><column-value><![CDATA[");
		sb.append(getAuthor_email());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notified_date</column-name><column-value><![CDATA[");
		sb.append(getNotified_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expired_date</column-name><column-value><![CDATA[");
		sb.append(getExpired_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleted_date</column-name><column-value><![CDATA[");
		sb.append(getDeleted_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content_url</column-name><column-value><![CDATA[");
		sb.append(getContent_url());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>create_datetime</column-name><column-value><![CDATA[");
		sb.append(getCreate_datetime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created_by</column-name><column-value><![CDATA[");
		sb.append(getCreated_by());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>update_datetime</column-name><column-value><![CDATA[");
		sb.append(getUpdate_datetime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updated_by</column-name><column-value><![CDATA[");
		sb.append(getUpdated_by());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _content_id;
	private String _content_type;
	private String _content_name;
	private long _groupId;
	private Date _modified_date;
	private String _author_name;
	private String _author_email;
	private Date _notified_date;
	private String _status;
	private Date _expired_date;
	private Date _deleted_date;
	private String _content_url;
	private Date _create_datetime;
	private String _created_by;
	private Date _update_datetime;
	private String _updated_by;
}